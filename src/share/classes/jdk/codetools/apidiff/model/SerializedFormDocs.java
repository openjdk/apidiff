/*
 * Copyright (c) 2019, 2023, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package jdk.codetools.apidiff.model;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.Map;

import jdk.codetools.apidiff.Log;

/**
 * A class containing the descriptions for the serialized form of a type,
 * as found in the appropriate file generated by javadoc.
 */
public class SerializedFormDocs {
    private final String serialVersionUID;
    private final String overview;
    private final Map<String, String> fields;
    private final Map<String, String> methods;

    /**
     * Reads a file generated by javadoc, and extracts the descriptions for
     * the serialized forms of the types contained therein.
     *
     * <p>If the file does not exist, an empty map will be returned.
     *
     * @param log  a log to which any errors will be reported
     * @param file the file to be read
     *
     * @return an instance of {@code APIDocs} that contains the descriptions
     *      found in the file.
     */
    public static Map<String, SerializedFormDocs> read(Log log, Path file) {
        if (Files.exists(file)) {
            SerializedFormReader r = new SerializedFormReader(log);
            r.read(file);
            return r.getSerializedFormDocs();
        } else {
            return Collections.emptyMap();
        }
    }

    /**
     * Creates an instance of {@code SerializedFormDocs}.
     *
     * @param serialVersionUID the serial version UID, or {@code null}
     * @param overview         the overview, or {@code null}
     * @param fields           the collection of descriptions for the serialized fields
     * @param methods          the collection of descriptions for the serialization methods
     */
    SerializedFormDocs(String serialVersionUID, String overview,
                   Map<String, String> fields, Map<String, String> methods) {
        this.serialVersionUID = serialVersionUID;
        this.overview = overview;
        this.fields = fields;
        this.methods = methods;
    }

    /**
     * Returns the serial version UID for the type, or {@code null} if not known.
     *
     * @return the serial version UID
     */
    public String getSerialVersionUID() {
        return serialVersionUID;
    }

    /**
     * Returns the serialization overview for the type, or {@code null} if not given.
     * The overview comes from the documentation comment for the
     * {@code serialPersistentFields} member.
     *
     * @return the serialization overview
     */
    public String getOverview() {
        return overview;
    }

    /**
     * Returns a map containing the descriptions of all the serialized fields
     * for this type that were found in the file.
     *
     * @return a map of descriptions, indexed by the name of the field
     */
    public Map<String, String> getFieldDescriptions() { return fields; }

    /**
     * Returns the description for a serialized field, or {@code null} if not found.
     *
     * @param name the name of the field
     *
     * @return the description
     */
    public String getFieldDescription(String name) {
        return fields.get(name);
    }

    /**
     * Returns a map containing the descriptions of all the serialization methods
     * for this type that were found in the file.
     *
     * @return a map of descriptions, indexed by the name of the method
     */
    public Map<String, String> getMethodDescriptions() { return methods; }

    /**
     * Returns the description for a serialization method, or {@code null} if not found.
     * No serialization methods are overloaded, and so it is not necessary to include
     * the list of parameter types.
     *
     * @param name the name of the method
     *
     * @return the description
     */
    public String getMethodDescription(String name) {
        return methods.get(name);
    }
}
